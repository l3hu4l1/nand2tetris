// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack
/**
 *  A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer). 
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
    static int n;
    static Array powersOfTwo;

    // Initializes the Math library.
    function void init() {
        var int i, pow;
        let n = 16;
        let powersOfTwo = Array.new(n);

        let i = 0;
        let pow = 1;

        while (i < n) {
            let powersOfTwo[i] = pow;
            let pow = pow * 2;
            let i = i + 1;
        }

        return;
    }

    // Returns true if the j-th bit of y is 1
    function boolean bit(int y, int j) {
        return (y & powersOfTwo[j]);
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method. 
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value. */
    function int multiply(int x, int y) {
        var int sum, j, shiftedX;
        let sum = 0;
        let shiftedX = x;
        let j = 0;

        while (j < n) {
            if (Math.bit(y, j)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let j = j + 1;
        }

        return sum;
    }

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value. */
    function int divide(int x, int y) {
        var int result;

        if (y = 0) {
            return 0;
        }

        let result = Math.div(Math.abs(x), Math.abs(y));

        if (x < 0 = y < 0) {
            return result;
        }
        return -result;
    }

    function int div(int x, int y) {
        var int q, result, sum;

        if (y > x) {
            return 0;
        }

        if (y < 16384) {
            let q = Math.div(x, y + y);

        } else {
            let q = 0;
        }

        let sum = q + q;
        if (x - sum * y < y) {
            let result = sum;
        } else {
            let result = sum + 1;
        }

        return result;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, temp, p;

        let y = 0;
        let j = (n / 2) - 1;

        while (~(j < 0)) {
            let p = powersOfTwo[j];
            let temp = y + p;
            let temp = temp * temp;

            if (~(temp > x) & (temp > 0)) {
                let y = y + p;
            }
            let j = j - 1;
        }

        return y;
    }

    /** Returns the greater value. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller value. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        } else {
            return x;
        }
    }
}
